name: 'Alpine Linux Live ISO Builder'
description: 'Builds a bootable Alpine Linux CLI ISO with selected tools'
author: 'Dawid Bielecki'

inputs:
  alpine-version:
    description: 'Alpine Linux version to use (e.g. 3.19)'
    required: false
    default: '3.19'

  upload-artifacts:
    description: 'Upload the built ISO as a GitHub artifact (true/false)'
    required: false
    default: 'true'

  use-cache:
    description: 'Use cached Alpine minirootfs if available'
    required: false
    default: 'true'

runs:
  using: "composite"
  steps:
    - name: Set up environment
      shell: bash
      run: |
        set -e
        echo "Using Alpine version: ${{ inputs.alpine-version }}"
        mkdir -p build

    - name: Download Alpine minirootfs
      shell: bash
      run: |
        set -e
        ALPINE_VERSION="${{ inputs.alpine-version }}"
        ROOTFS_URL="https://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/releases/x86_64/alpine-minirootfs-${ALPINE_VERSION}.0-x86_64.tar.gz"
        if [ ! -f alpine-minirootfs.tar.gz ]; then
          echo "Downloading Alpine minirootfs..."
          curl -L "$ROOTFS_URL" -o alpine-minirootfs.tar.gz
        else
          echo "Using cached minirootfs..."
        fi

    - name: Extract and configure minirootfs
      shell: bash
      run: |
        mkdir -p rootfs
        sudo tar -xzf alpine-minirootfs.tar.gz -C rootfs
        sudo cp /etc/resolv.conf rootfs/etc/
        sudo chroot rootfs apk add --no-cache bash shadow
        sudo chroot rootfs chsh -s /bin/bash
        echo "Default shell changed to bash"
        sudo chroot rootfs adduser -D alpine
        echo "alpine:alpine" | sudo chroot rootfs chpasswd
        sudo chroot rootfs adduser alpine wheel

    - name: Add CLI tools
      shell: bash
      run: |
        sudo chroot rootfs apk add --no-cache \
          vim neovim nano mc \
          parted e2fsprogs util-linux \
          gdisk dosfstools \
          gzip zstd bzip2 xz \
          gnupg openssl \
          python3 py3-psutil \
          coreutils

    - name: Create ISO image
      shell: bash
      run: |
        echo "Creating Alpine Live ISO..."
        ISO_NAME="alpine-live-cli.iso"
        mkisofs -o $ISO_NAME -b boot/syslinux/isolinux.bin \
          -c boot/syslinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table \
          -J -R -V "ALPINE_LIVE_CLI" rootfs
        echo "ISO created: $ISO_NAME"
        sha256sum $ISO_NAME > $ISO_NAME.sha256
        md5sum $ISO_NAME > $ISO_NAME.md5

    - name: Upload ISO as artifact
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: alpine-live-cli
        path: |
          alpine-live-cli.iso
          alpine-live-cli.iso.sha256
          alpine-live-cli.iso.md5
