name: 'Build Alpine Live ISO'
description: 'Build an Alpine Linux Live ISO image with CLI tools'
inputs:
  alpine-version:
    description: 'Alpine version to use'
    required: false
    default: '3.19'

  upload-artifacts:
    description: 'Whether to upload ISO and checksums as artifacts'
    required: false
    default: 'false'

  use-cache:
    description: 'Use cached Alpine minirootfs if available'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Set up variables
      shell: bash
      run: |
        set -e
        echo "Using Alpine version: ${{ inputs.alpine-version }}"
        echo "ALPINE_VERSION=${{ inputs.alpine-version }}" >> $GITHUB_ENV

    - name: Download Alpine minirootfs
      shell: bash
      run: |
        set -e
        if [[ "${{ inputs.use-cache }}" == "true" && -f alpine-minirootfs.tar.gz ]]; then
          echo "Using cached minirootfs..."
        else
          curl -sSL -o alpine-minirootfs.tar.gz \
            https://dl-cdn.alpinelinux.org/alpine/v${{ inputs.alpine-version }}/releases/x86_64/alpine-minirootfs-${{ inputs.alpine-version }}.0-x86_64.tar.gz
        fi

    - name: Extract rootfs and prepare
      shell: bash
      run: |
        set -e
        mkdir -p rootfs
        sudo tar -xzf alpine-minirootfs.tar.gz -C rootfs

        sudo cp /etc/resolv.conf rootfs/etc/resolv.conf

        # Setup chroot environment and install packages
        sudo chroot rootfs /bin/sh -c "
          apk update &&
          apk add --no-cache \
            bash \
            coreutils \
            vim neovim nano mc \
            parted e2fsprogs util-linux \
            gptfdisk dosfstools \
            gzip zstd bzip2 xz \
            gnupg openssl \
            python3 py3-psutil \
            shadow sudo \
            cdrtools
        "

        # Set default shell to bash for alpine user
        sudo sed -i 's#/bin/ash#/bin/bash#' rootfs/etc/passwd

    - name: Create Alpine Live ISO
      shell: bash
      run: |
        echo "Creating Alpine Live ISO..."
        mkdir -p iso/boot/grub

        # Copy kernel and initramfs
        sudo cp rootfs/boot/vmlinuz-* iso/boot/vmlinuz
        sudo cp rootfs/boot/initramfs-* iso/boot/initramfs

        # Create minimal GRUB config
        cat <<EOF > iso/boot/grub/grub.cfg
        set default=0
        set timeout=5

        menuentry "Alpine Live CLI" {
            linux /boot/vmlinuz modules=loop,squashfs,sd-mod,usb-storage quiet
            initrd /boot/initramfs
        }
EOF

        # Generate ISO
        mkisofs -o alpine-live-cli.iso \
          -b boot/grub/i386-pc/eltorito.img \
          -no-emul-boot -boot-load-size 4 -boot-info-table \
          -R -J -v -T iso

        # Generate checksums
        sha256sum alpine-live-cli.iso > alpine-live-cli.iso.sha256
        md5sum alpine-live-cli.iso > alpine-live-cli.iso.md5

    - name: Upload Artifacts (if enabled)
      if: ${{ inputs.upload-artifacts == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: alpine-live-cli
        path: |
          alpine-live-cli.iso
          alpine-live-cli.iso.sha256
          alpine-live-cli.iso.md5
