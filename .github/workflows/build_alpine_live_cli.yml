name: Build Alpine Linux Live CLI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-alpine-live:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qemu-utils \
          xorriso \
          dosfstools \
          mtools \
          syslinux \
          syslinux-utils \
          isolinux \
          wget \
          curl \
          squashfs-tools \
          grub-efi-amd64-bin \
          grub-pc-bin \
          grub-common \
          debootstrap

    - name: Download Alpine Linux
      run: |
        ALPINE_VERSION="3.19"
        ALPINE_ARCH="x86_64"
        
        # Download Alpine mini root filesystem
        wget -O alpine-minirootfs.tar.gz \
          "https://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/releases/${ALPINE_ARCH}/alpine-minirootfs-${ALPINE_VERSION}.0-${ALPINE_ARCH}.tar.gz"
        
        # Download Alpine standard ISO for bootloader files
        wget -O alpine-standard.iso \
          "https://dl-cdn.alpinelinux.org/alpine/v${ALPINE_VERSION}/releases/${ALPINE_ARCH}/alpine-standard-${ALPINE_VERSION}.0-${ALPINE_ARCH}.iso"

    - name: Create Alpine Live system
      run: |
        # Create working directories
        mkdir -p alpine-live
        cd alpine-live
        
        # Extract Alpine mini root filesystem
        sudo tar -xzf ../alpine-minirootfs.tar.gz
        
        # Create proper chroot environment
        sudo mount --bind /dev dev/
        sudo mount --bind /proc proc/
        sudo mount --bind /sys sys/
        sudo cp /etc/resolv.conf etc/resolv.conf

    - name: Configure Alpine system
      run: |
        cd alpine-live
        
        # Configure Alpine in chroot
        sudo chroot . /bin/sh -c '
        # Setup repositories
        echo "http://dl-cdn.alpinelinux.org/alpine/v3.19/main" > /etc/apk/repositories
        echo "http://dl-cdn.alpinelinux.org/alpine/v3.19/community" >> /etc/apk/repositories
        echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
        
        # Update package index
        apk update
        
        # Install base system
        apk add --no-cache \
          alpine-base \
          alpine-conf \
          busybox \
          openrc \
          util-linux \
          coreutils \
          linux-lts \
          linux-firmware
        
        # Install Python 3.12 (3.15 not available yet)
        apk add --no-cache \
          python3 \
          python3-dev \
          py3-pip \
          py3-setuptools \
          py3-wheel \
          build-base \
          cmake \
          qt6-qtbase-dev \
          qt6-qtdeclarative-dev \
          mesa-dev \
          libxkbcommon-dev
        
        # Install shell and editors
        apk add --no-cache \
          bash \
          vim \
          neovim \
          nano \
          mc
        
        # Install disk utilities
        apk add --no-cache \
          util-linux \
          parted \
          gdisk \
          dosfstools \
          e2fsprogs \
          ntfs-3g
        
        # Install compression tools
        apk add --no-cache \
          gzip \
          zstd \
          bzip2 \
          xz \
          tar \
          unzip \
          zip
        
        # Install additional utilities
        apk add --no-cache \
          gnupg \
          diffutils \
          coreutils \
          findutils \
          grep \
          sed \
          gawk \
          curl \
          wget \
          rsync \
          openssh-client
        
        # Install bootloader support
        apk add --no-cache \
          grub \
          grub-efi \
          efibootmgr \
          syslinux
        
        # Setup users
        adduser -D -s /bin/bash alpine
        echo "alpine:alpine" | chpasswd
        echo "root:alpine" | chpasswd
        
        # Enable essential services
        rc-update add devfs sysinit
        rc-update add dmesg sysinit
        rc-update add mdev sysinit
        rc-update add hwclock boot
        rc-update add modules boot
        rc-update add sysctl boot
        rc-update add hostname boot
        rc-update add bootmisc boot
        rc-update add syslog boot
        rc-update add networking default
        rc-update add local default
        rc-update add mount-ro shutdown
        rc-update add killprocs shutdown
        rc-update add savecache shutdown
        '
        
        # Install PySide6 and psutil via pip (after chroot)
        sudo chroot . /bin/sh -c '
        pip3 install --break-system-packages PySide6 psutil
        '
        
        # Create live system configuration
        sudo chroot . /bin/sh -c '
        cat > /etc/local.d/live-config.start << "LIVEEOF"
#!/bin/sh

# Auto-login on console
if [ ! -f /etc/inittab.orig ]; then
  cp /etc/inittab /etc/inittab.orig
  sed -i "s/tty1::respawn:\/sbin\/getty 38400 tty1/tty1::respawn:\/sbin\/getty -a alpine 38400 tty1/" /etc/inittab
fi

# Setup temporary directories
mount -t tmpfs tmpfs /tmp
mount -t tmpfs tmpfs /var/tmp

# Display welcome message
cat > /etc/motd << "WELCOMEEOF"

╔════════════════════════════════════════════════════════════════╗
║                    Alpine Linux Live CLI                       ║
║                                                                ║
║  Default user: alpine (password: alpine)                      ║
║  Root password: alpine                                         ║
║                                                                ║
║  Included tools:                                               ║
║  • Python 3.12 with PySide6, psutil                          ║
║  • Editors: vim, nvim, nano, mc                               ║
║  • Disk tools: dd, lsblk, parted, gdisk                      ║
║  • Compression: gzip, zstd, bzip2, xz                        ║
║  • Security: gpg, sha256sum, md5sum                           ║
║                                                                ║
╚════════════════════════════════════════════════════════════════╝

WELCOMEEOF
LIVEEOF

chmod +x /etc/local.d/live-config.start
rc-update add local default

# Clean up
apk cache clean
rm -rf /var/cache/apk/*
rm -rf /tmp/*
        '
        
        # Cleanup chroot mounts
        sudo umount dev/ proc/ sys/ || true

    - name: Create initramfs and extract kernel
      run: |
        cd alpine-live
        
        # Mount for kernel operations
        sudo mount --bind /dev dev/
        sudo mount --bind /proc proc/
        sudo mount --bind /sys sys/
        
        # Create initramfs
        sudo chroot . mkinitfs -o /boot/initramfs-live $(ls lib/modules/ | head -1)
        
        # Copy kernel
        sudo cp boot/vmlinuz-lts boot/vmlinuz-live || sudo cp boot/vmlinuz-* boot/vmlinuz-live
        
        # Copy boot files to host
        sudo cp boot/vmlinuz-live ../
        sudo cp boot/initramfs-live ../
        
        # Cleanup mounts
        sudo umount dev/ proc/ sys/ || true

    - name: Create SquashFS filesystem
      run: |
        # Create SquashFS image
        sudo mksquashfs alpine-live alpine-live.squashfs \
          -comp xz \
          -e boot/vmlinuz-live \
          -e boot/initramfs-live

    - name: Create bootable ISO with UEFI support
      run: |
        # Create ISO structure
        mkdir -p iso-build/{boot/grub,efi/boot,live}
        
        # Copy kernel and initramfs
        cp vmlinuz-live iso-build/boot/
        cp initramfs-live iso-build/boot/
        
        # Copy live system
        cp alpine-live.squashfs iso-build/live/
        
        # Create GRUB configuration for UEFI
        cat > iso-build/efi/boot/grub.cfg << 'EOF'
        set timeout=10
        set default=0
        
        menuentry "Alpine Linux Live CLI" {
            linux /boot/vmlinuz-live boot=live live-media-path=/live quiet
            initrd /boot/initramfs-live
        }
        
        menuentry "Alpine Linux Live CLI (Debug)" {
            linux /boot/vmlinuz-live boot=live live-media-path=/live debug
            initrd /boot/initramfs-live
        }
        EOF
        
        # Create legacy GRUB configuration
        cp iso-build/efi/boot/grub.cfg iso-build/boot/grub/
        
        # Create GRUB EFI bootloader
        grub-mkimage -o iso-build/efi/boot/bootx64.efi -p /efi/boot -O x86_64-efi \
          part_gpt part_msdos fat ext2 iso9660 chain boot configfile normal \
          minicmd search search_fs_file search_fs_uuid search_label linux \
          gfxterm gettext echo true test regexp probe
        
        # Create legacy GRUB bootloader 
        mkdir -p iso-build/boot/grub/i386-pc
        grub-mkimage -o iso-build/boot/grub/i386-pc/core.img -p /boot/grub -O i386-pc \
          biosdisk part_msdos part_gpt fat ext2 iso9660 chain boot configfile normal \
          minicmd search search_fs_file search_fs_uuid search_label linux echo true test regexp probe
        
        cat /usr/lib/grub/i386-pc/cdboot.img iso-build/boot/grub/i386-pc/core.img > iso-build/boot/grub/i386-pc/eltorito.img
        
        # Build ISO with hybrid support
        xorriso -as mkisofs \
          -iso-level 3 \
          -full-iso9660-filenames \
          -volid "ALPINE_LIVE_CLI" \
          -appid "Alpine Linux Live CLI" \
          -publisher "GitHub Actions Build" \
          -preparer "alpine-live-builder" \
          -eltorito-boot boot/grub/i386-pc/eltorito.img \
          -no-emul-boot \
          -boot-load-size 4 \
          -boot-info-table \
          -eltorito-alt-boot \
          -efi-boot efi/boot/bootx64.efi \
          -no-emul-boot \
          -isohybrid-gpt-basdat \
          -output alpine-live-cli.iso \
          iso-build/

    - name: Generate checksums
      run: |
        sha256sum alpine-live-cli.iso > alpine-live-cli.iso.sha256
        md5sum alpine-live-cli.iso > alpine-live-cli.iso.md5

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: alpine-live-cli
        path: |
          alpine-live-cli.iso
          alpine-live-cli.iso.sha256
          alpine-live-cli.iso.md5
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          alpine-live-cli.iso
          alpine-live-cli.iso.sha256
          alpine-live-cli.iso.md5
        body: |
          ## Alpine Linux Live CLI
          
          Bootowalna dystrybucja Alpine Linux z narzędziami CLI
          
          ### Zawiera:
          - Python 3.12 z PySide6, psutil
          - Edytory: vim, neovim, nano, mc
          - Narzędzia dyskowe: dd, lsblk, parted, gdisk
          - Kompresja: gzip, zstd, bzip2, xz
          - Bezpieczeństwo: gpg, sha256sum, md5sum
          - Wsparcie UEFI i Legacy BIOS
          
          ### Użycie:
          1. Pobierz plik ISO
          2. Nagraj na USB/DVD
          3. Bootuj z UEFI lub BIOS
          4. Zaloguj się jako `alpine` (hasło: `alpine`)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
